{"version":3,"sources":["../../src/controllers/report.controller.js"],"names":["ReportController","Report","query","req","res","reports","ReportModel","find","send","err","status","error","get","id","params","report","findOne","_id","dir","path","resolve","url","Util","data","footer","header","helpers","page","readFile","console","log","create","body","defaultDir","bodyPdf","writeFile","update","generate","reportId","pdfData","generatePdf","writeHead","length","end"],"mappings":"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","file":"report.controller.js","sourcesContent":["import path from 'path';\n\nimport ReportModel from './../models/report.model'\n\nimport UtilReport from './../util/report.util'\n\nconst ReportController = () => {\n\n    const Report = {\n        query: async (req, res) => {\n            try {\n\n                const reports = await ReportModel.find()\n\n                return res.send({ reports })\n\n            } catch (err) {\n                return res.status(400).send({ error: 'Erro ao buscar lista de reports' })\n            }\n\n        },\n        get: async (req, res) => {\n            \n            const id = req.params.id\n\n            try {\n                const report = await ReportModel.findOne({\n                    _id: id\n                })\n\n                if (!report)\n                    return res.status(400).send({ error: ' Erro ao buscar report' })\n\n                const dir = path.resolve(\"./build/reports/\" + report._id + '-' + report.url)\n\n                const Util = UtilReport()\n\n                const { data, footer, header, helpers, page } = await Util.readFile(dir)\n\n                return res.send({\n                    report,\n                    data,\n                    footer,\n                    header,\n                    helpers,\n                    page\n                })\n\n            } catch (err) {\n                console.log(err)\n                return res.status(400).send({ error: 'Erro ao buscar report' })\n            }\n\n        },\n        create: async (req, res) => {\n            try {\n                const report = await ReportModel.create(req.body)\n\n                const dir = path.resolve(\"./build/reports/\" + report._id + '-' + report.url)\n\n                const defaultDir = path.resolve(\"./build/reports/default\")\n\n                const Util = UtilReport()\n\n                const { data, footer, header, helpers, page } = await Util.readFile(defaultDir)\n\n                const bodyPdf = {\n                    data: data,\n                    footer: footer,\n                    header: header,\n                    helpers: helpers,\n                    page: page\n                }\n\n                await Util.writeFile(dir, bodyPdf)\n\n                return res.send(report)\n\n            } catch (err) {\n                console.log(err)\n                return res.status(400).send({ error: 'Erro ao criar report' })\n            }\n        },\n        update: async (req, res) => {\n\n            const id = req.params.id\n\n            try {\n\n                const report = await ReportModel.findOne({ _id: id })\n\n                if (!report)\n                    return res.status(400).send({ error: 'Esse projeto não existe na base de dados' })\n\n                const Util = UtilReport()\n\n                const dir = path.resolve(\"./build/reports/\" + report._id + '-' + report.url)\n\n                await Util.writeFile(dir, req.body)\n\n                const { data, footer, header, helpers, page } = await Util.readFile(dir)\n\n                return res.send({\n                    report,\n                    data,\n                    footer,\n                    header,\n                    helpers,\n                    page\n                })\n\n            } catch (err) {\n\n                return res.status(400).send({ error: 'Ocorreu algum erro ao atualizar o projeto' })\n            }\n\n        },\n        generate: async(req, res) => {\n\n            const id = req.body.reportId\n\n            try {\n            \n                const report = await ReportModel.findOne({ _id: id })\n\n                if (!report)\n                    return res.status(400).send({ error: 'Esse projeto não existe na base de dados' })\n\n                const Util = UtilReport()\n\n                // console.log(req.body)\n\n                const pdfData  = await Util.generatePdf(req.body)\n\n                console.log(pdfData)\n\n                res.writeHead(200, {\n                    'Content-Type': 'application/pdf',\n                    'Content-Disposition': 'attachment; filename=Laudos.pdf',\n                    'Content-Length': pdfData.length\n                });\n\n                return res.end(pdfData)\n\n            } catch (err) {\n                console.log(err)\n                return res.status(400).send({ error: 'Erro ao renderizar PDF' })\n            }\n        }\n    }\n\n    return Report\n}\n\nexport default ReportController"]}