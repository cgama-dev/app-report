{"version":3,"sources":["../../src/util/report.util.js"],"names":["UtilReport","Report","readFile","dir","fs","data","footer","header","helpers","page","bodyPdf","toString","writeFile","existsSync","mkdirSync","generatePdf","pdf","jsreport","render","template","content","engine","recipe","phantom","format","width","margin","numberOfWorkers","timeout","allowLocalFilesAccess","headerHeight","footerHeight","pdfData"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,aAAa,MAAM;AACrB,UAAMC,SAAS;AACXC,kBAAU,MAAOC,GAAP,IAAe;;AAErB,kBAAMD,WAAW,6BAAUE,aAAGF,QAAb,CAAjB;;AAEA,kBAAMG,OAAO,MAAMH,SAASC,MAAM,YAAf,CAAnB;AACA,kBAAMG,SAAS,MAAMJ,SAASC,MAAM,cAAf,CAArB;AACA,kBAAMI,SAAS,MAAML,SAASC,MAAM,cAAf,CAArB;AACA,kBAAMK,UAAU,MAAMN,SAASC,MAAM,aAAf,CAAtB;AACA,kBAAMM,OAAO,MAAMP,SAASC,MAAM,YAAf,CAAnB;;AAEA,kBAAMO,UAAU;AACZL,sBAAMA,KAAKM,QAAL,EADM;AAEZL,wBAAQA,OAAOK,QAAP,EAFI;AAGZJ,wBAAQA,OAAOI,QAAP,EAHI;AAIZH,yBAASA,QAAQG,QAAR,EAJG;AAKZF,sBAAMA,KAAKE,QAAL;AALM,aAAhB;;AAQA,mBAAOD,OAAP;AACH,SApBU;AAqBXE,mBAAW,OAAOT,GAAP,EAAYO,OAAZ,KAAwB;;AAE/B,gBAAI,CAACN,aAAGS,UAAH,CAAcV,GAAd,CAAL,EAAyB;AACrBC,6BAAGU,SAAH,CAAaX,GAAb;AACH;;AAED,kBAAMS,YAAY,6BAAUR,aAAGQ,SAAb,CAAlB;;AAEA,kBAAM;AACFP,oBADE;AAEFC,sBAFE;AAGFC,sBAHE;AAIFC,uBAJE;AAKFC;AALE,gBAMFC,OANJ;;AAQA,kBAAME,UAAUT,MAAM,aAAhB,EAA+BK,OAA/B,CAAN;AACA,kBAAMI,UAAUT,MAAM,YAAhB,EAA8BE,IAA9B,CAAN;AACA,kBAAMO,UAAUT,MAAM,YAAhB,EAA8BM,IAA9B,CAAN;AACA,kBAAMG,UAAUT,MAAM,cAAhB,EAAgCI,MAAhC,CAAN;AACA,kBAAMK,UAAUT,MAAM,cAAhB,EAAgCG,MAAhC,CAAN;;AAEA,mBAAO,IAAP;AACH,SA5CU;AA6CXS,qBAAa,MAAOL,OAAP,IAAmB;;AAE5B,kBAAM,EAAEL,IAAF,EAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,IAAjC,KAA0CC,OAAhD;;AAEA,kBAAMM,MAAM,MAAMC,mBAASC,MAAT,CAAgB;AAC9BC,0BAAU;AACNC,6BAASX,KAAKE,QAAL,EADH;AAENH,6BAASA,QAAQG,QAAR,EAFH;AAGNU,4BAAQ,YAHF;AAINC,4BAAQ,aAJF;AAKNC,6BAAS;AACLC,gCAAQ,IADH;AAELC,+BAAO,OAFF;AAGLC,gCAAQ,KAHH;AAILC,yCAAiB,CAJZ;AAKLC,iCAAS,MALJ;AAMLC,+CAAuB,KANlB;AAOLtB,gCAAQA,OAAOI,QAAP,EAPH;AAQLmB,sCAAc,KART;AASLxB,gCAAQA,OAAOK,QAAP,EATH;AAULoB,sCAAc;AAVT;;AALH,iBADoB;AAoB9B1B,sBAAMA,KAAKM,QAAL;AApBwB,aAAhB,CAAlB;;AAuBA,kBAAMqB,UAAUhB,IAAII,OAApB;;AAEA,mBAAOY,OAAP;AACH;AA3EU,KAAf;;AA8EA,WAAO/B,MAAP;AACH,CAhFD;kBAiFeD,U","file":"report.util.js","sourcesContent":["import fs from 'fs'\nimport promisify from 'promisify-node'\nimport jsreport from '../modules/jsreport.module'\n\nconst UtilReport = () => {\n    const Report = {\n        readFile: async (dir) => {\n\n            const readFile = promisify(fs.readFile)\n\n            const data = await readFile(dir + '/data.json')\n            const footer = await readFile(dir + '/footer.html')\n            const header = await readFile(dir + '/header.html')\n            const helpers = await readFile(dir + '/helpers.js')\n            const page = await readFile(dir + '/page.html')\n\n            const bodyPdf = {\n                data: data.toString(),\n                footer: footer.toString(),\n                header: header.toString(),\n                helpers: helpers.toString(),\n                page: page.toString()\n            }\n\n            return bodyPdf\n        },\n        writeFile: async (dir, bodyPdf) => {\n\n            if (!fs.existsSync(dir)) {\n                fs.mkdirSync(dir);\n            }\n\n            const writeFile = promisify(fs.writeFile)\n\n            const {\n                data,\n                footer,\n                header,\n                helpers,\n                page\n            } = bodyPdf\n\n            await writeFile(dir + \"/helpers.js\", helpers)\n            await writeFile(dir + \"/data.json\", data)\n            await writeFile(dir + \"/page.html\", page)\n            await writeFile(dir + \"/header.html\", header)\n            await writeFile(dir + \"/footer.html\", footer)\n\n            return true\n        },\n        generatePdf: async (bodyPdf) => {\n\n            const { data, footer, header, helpers, page } = bodyPdf\n\n            const pdf = await jsreport.render({\n                template: {\n                    content: page.toString(),\n                    helpers: helpers.toString(),\n                    engine: 'handlebars',\n                    recipe: 'phantom-pdf',\n                    phantom: {\n                        format: \"A4\",\n                        width: \"700px\",\n                        margin: \"1cm\",\n                        numberOfWorkers: 1,\n                        timeout: 180000,\n                        allowLocalFilesAccess: false,\n                        header: header.toString(),\n                        headerHeight: \"3cm\",\n                        footer: footer.toString(),\n                        footerHeight: \"1cm\"\n                    }\n\n                },\n                data: data.toString()\n            });\n\n            const pdfData = pdf.content\n\n            return pdfData\n        }\n    }\n\n    return Report\n}\nexport default UtilReport"]}